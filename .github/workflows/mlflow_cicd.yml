name: MLflow CI/CD

on:
  push:
    branches: [ main ]  # main 브랜치에 푸시될 때마다 워크플로우 실행

jobs:
  build:
    runs-on: ubuntu-latest  # GitHub Actions가 제공하는 최신 Ubuntu 환경에서 실행

    steps:
    - name: Checkout repository  # 리포지토리의 코드를 체크아웃하는 액션
      uses: actions/checkout@v2

    - name: Set up Python  # Python 환경을 설정하는 액션
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    - name: Install dependencies  # 필요한 의존성 패키지 설치
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libssl-dev zlib1g-dev \
                                libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm \
                                libncurses5-dev libncursesw5-dev xz-utils tk-dev libffi-dev \
                                liblzma-dev git
        python -m pip install --upgrade pip
        pip install -r $GITHUB_WORKSPACE/requirements.txt
        pip install mlflow

    - name: Set up Docker Buildx  # Docker Buildx 설정
      uses: docker/setup-buildx-action@v1

    - name: Log in to Docker Hub  # Docker Hub에 로그인
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image  # Docker 이미지를 빌드하고 푸시
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/mlflow_cicd:latest $GITHUB_WORKSPACE
        docker push ${{ secrets.DOCKER_USERNAME }}/mlflow_cicd:latest

    - name: Check if container exists  # 컨테이너 존재 여부 확인
      id: check_container
      run: |
        if [ $(docker ps -a -f name=mlflow_cicd_container | grep -w mlflow_cicd_container | wc -l) -eq 1 ]; then
          echo "exists=true" >> $GITHUB_ENV
        else
          echo "exists=false" >> $GITHUB_ENV
        fi

    - name: Run Docker container  # 컨테이너가 존재하지 않을 경우 새로 생성하여 실행
      if: env.exists == 'false'
      run: |
        docker run -d -p 5002:5000 --name mlflow_cicd_container ${{ secrets.DOCKER_USERNAME }}/mlflow_cicd:latest
        sleep 10  # 컨테이너가 시작될 시간을 줌

    - name: Start existing Docker container  # 기존 컨테이너가 있을 경우 시작
      if: env.exists == 'true'
      run: |
        docker start mlflow_cicd_container
        sleep 10  # 컨테이너가 시작될 시간을 줌

    - name: Test Docker container  # 컨테이너 내에서 스크립트 실행
      run: |
        docker exec mlflow_cicd_container python /scripts/train_model.py
        docker exec mlflow_cicd_container python /scripts/evaluate_model.py --model_name SimpleNN --model_version 1
